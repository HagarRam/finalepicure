{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\n// const data = async () => {\n// \ttry {\n// \t\tconst response = await fetch('http://localhost:8000/login', {\n// \t\t\tmethod: 'GET',\n// \t\t});\n// \t\tconst data = await response.json();\n// \t\tconsole.log(data);\n// \t\treturn data;\n// \t} catch (err) {\n// \t\tconsole.log();\n// \t}\n// };\n// const active: IActive[] = await data();\n\n// export interface IActive {\n// \temail: string;\n// \tpassword: string;\n// \ttoken?: string;\n// \tconnect?: boolean;\n// }\n\n// interface IActiveUsersState {\n// \tvalue: IActive[];\n// \tfilteredValue: IActive[];\n// }\n\n// export const activeUsers = createSlice({\n// \tname: 'users',\n// \tinitialState: {\n// \t\tvalue: {},\n// \t},\n// \treducers: {\n// \t\tsetActiveUsers: (state, action) => {\n// \t\t\tconst currentUser = action.payload;\n// \t\t\tconst userLogIn = active.find((user) => {\n// \t\t\t\treturn user.email === currentUser.email;\n// \t\t\t});\n// \t\t\tstate.value = userLogIn || {};\n// \t\t\tconsole.log(userLogIn);\n// \t\t},\n// \t},\n// });\n\n// export const { setActiveUsers } = activeUsers.actions;\n\n// export default activeUsers.reducer;","map":{"version":3,"names":[],"sources":["C:/Users/hagar/bootcamp/finalepicure/frontend/src/store/slices/activeUsers.tsx"],"sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\r\n// const data = async () => {\r\n// \ttry {\r\n// \t\tconst response = await fetch('http://localhost:8000/login', {\r\n// \t\t\tmethod: 'GET',\r\n// \t\t});\r\n// \t\tconst data = await response.json();\r\n// \t\tconsole.log(data);\r\n// \t\treturn data;\r\n// \t} catch (err) {\r\n// \t\tconsole.log();\r\n// \t}\r\n// };\r\n// const active: IActive[] = await data();\r\n\r\n// export interface IActive {\r\n// \temail: string;\r\n// \tpassword: string;\r\n// \ttoken?: string;\r\n// \tconnect?: boolean;\r\n// }\r\n\r\n// interface IActiveUsersState {\r\n// \tvalue: IActive[];\r\n// \tfilteredValue: IActive[];\r\n// }\r\n\r\n// export const activeUsers = createSlice({\r\n// \tname: 'users',\r\n// \tinitialState: {\r\n// \t\tvalue: {},\r\n// \t},\r\n// \treducers: {\r\n// \t\tsetActiveUsers: (state, action) => {\r\n// \t\t\tconst currentUser = action.payload;\r\n// \t\t\tconst userLogIn = active.find((user) => {\r\n// \t\t\t\treturn user.email === currentUser.email;\r\n// \t\t\t});\r\n// \t\t\tstate.value = userLogIn || {};\r\n// \t\t\tconsole.log(userLogIn);\r\n// \t\t},\r\n// \t},\r\n// });\r\n\r\n// export const { setActiveUsers } = activeUsers.actions;\r\n\r\n// export default activeUsers.reducer;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}