{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\n// import { useState } from 'react';\n\n// export interface IActive {\n// \temail: string;\n// \tpassword: string;\n// \ttoken?: string;\n// \tconnect?: boolean;\n// }\n\n// const data = async () => {\n// \ttry {\n// \t\tconst response = await fetch('http://localhost:8000/login', {\n// \t\t\tmethod: 'GET',\n// \t\t});\n// \t\tconst data = await response.json();\n// \t\tconsole.log(data);\n// \t\treturn data;\n// \t} catch (err) {\n// \t\tconsole.log();\n// \t}\n// };\n\n// const active: IActive[] = await data();\n\n// export const activeUsers = createSlice({\n// \tname: 'active-users',\n// \tinitialState: {\n// \t\tvalue: active,\n// \t\tfilteredValue: active,\n// \t},\n// \treducers: {\n// \t\tcreateOrder: (state) => {\n// \t\t\tstate.filteredValue = state.value;\n// \t\t},\n// \t},\n// });\n\n// export default activeUsers.reducer;\n\nimport { createSlice } from '@reduxjs/toolkit';\nconst data = async () => {\n  try {\n    const response = await fetch('http://localhost:8000/login', {\n      method: 'GET'\n    });\n    const data = await response.json();\n    console.log(data);\n    return data;\n  } catch (err) {\n    console.log();\n  }\n};\nconst active = await data();\nconst initialState = {\n  value: active,\n  filteredValue: active\n};\nexport const activeUsers = createSlice({\n  name: 'active-users',\n  initialState,\n  reducers: {\n    setActiveUsers: (state, action) => {\n      state.filteredValue = action.payload;\n    }\n  }\n});\nexport const {\n  setActiveUsers\n} = activeUsers.actions;\nexport default activeUsers.reducer;\n\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// export interface IActive {\n// \temail: string;\n// \tpassword: string;\n// \ttoken?: string;\n// \tconnect?: boolean;\n// }\n\n// interface IUserState {\n// \tusers: IActive[];\n// \tloading: 'idle' | 'pending' | 'succeeded' | 'failed';\n// \terror: string | null;\n// }\n\n// const initialState: IUserState = {\n// \tusers: [],\n// \tloading: 'idle',\n// \terror: null,\n// };\n\n// export const fetchUsers = createAsyncThunk('login/fetchUsers', async () => {\n// \tconst response = await fetch('http://localhost:8000/login');\n// \tif (!response.ok) {\n// \t\tthrow new Error('Failed to fetch users');\n// \t}\n// \tconst data = await response.json();\n// \treturn data;\n// });\n\n// export const userSlice = createSlice({\n// \tname: 'users',\n// \tinitialState,\n// \treducers: {\n// \t\tsetActiveUsers: (state, action) => {\n// \t\t\tstate.value = action.payload;\n// \t\t\t// state.filteredValue = action.payload;\n// \t\t},\n// \t},\n// \textraReducers: (builder) => {\n// \t\tbuilder\n// \t\t\t.addCase(fetchUsers.pending, (state) => {\n// \t\t\t\tstate.loading = 'pending';\n// \t\t\t\tstate.error = null;\n// \t\t\t})\n// \t\t\t.addCase(fetchUsers.fulfilled, (state, action) => {\n// \t\t\t\tstate.loading = 'succeeded';\n// \t\t\t\tstate.error = null;\n// \t\t\t\tstate.users = action.payload;\n// \t\t\t})\n// \t\t\t.addCase(fetchUsers.rejected, (state, action) => {\n// \t\t\t\tstate.loading = 'failed';\n// \t\t\t\tstate.error = action.error.message ?? 'Failed to fetch users';\n// \t\t\t});\n// \t},\n// });\n\n// export default userSlice.reducer;","map":{"version":3,"names":["createSlice","data","response","fetch","method","json","console","log","err","active","initialState","value","filteredValue","activeUsers","name","reducers","setActiveUsers","state","action","payload","actions","reducer"],"sources":["C:/Users/hagar/bootcamp/finalepicure/frontend/src/store/slices/activeUsers.tsx"],"sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\r\n// import { useState } from 'react';\r\n\r\n// export interface IActive {\r\n// \temail: string;\r\n// \tpassword: string;\r\n// \ttoken?: string;\r\n// \tconnect?: boolean;\r\n// }\r\n\r\n// const data = async () => {\r\n// \ttry {\r\n// \t\tconst response = await fetch('http://localhost:8000/login', {\r\n// \t\t\tmethod: 'GET',\r\n// \t\t});\r\n// \t\tconst data = await response.json();\r\n// \t\tconsole.log(data);\r\n// \t\treturn data;\r\n// \t} catch (err) {\r\n// \t\tconsole.log();\r\n// \t}\r\n// };\r\n\r\n// const active: IActive[] = await data();\r\n\r\n// export const activeUsers = createSlice({\r\n// \tname: 'active-users',\r\n// \tinitialState: {\r\n// \t\tvalue: active,\r\n// \t\tfilteredValue: active,\r\n// \t},\r\n// \treducers: {\r\n// \t\tcreateOrder: (state) => {\r\n// \t\t\tstate.filteredValue = state.value;\r\n// \t\t},\r\n// \t},\r\n// });\r\n\r\n// export default activeUsers.reducer;\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nconst data = async () => {\r\n\ttry {\r\n\t\tconst response = await fetch('http://localhost:8000/login', {\r\n\t\t\tmethod: 'GET',\r\n\t\t});\r\n\t\tconst data = await response.json();\r\n\t\tconsole.log(data);\r\n\t\treturn data;\r\n\t} catch (err) {\r\n\t\tconsole.log();\r\n\t}\r\n};\r\nconst active: IActive[] = await data();\r\n\r\nexport interface IActive {\r\n\temail: string;\r\n\tpassword: string;\r\n\ttoken?: string;\r\n\tconnect?: boolean;\r\n}\r\n\r\ninterface IActiveUsersState {\r\n\tvalue: IActive[];\r\n\tfilteredValue: IActive[];\r\n}\r\n\r\nconst initialState: IActiveUsersState = {\r\n\tvalue: active,\r\n\tfilteredValue: active,\r\n};\r\n\r\nexport const activeUsers = createSlice({\r\n\tname: 'active-users',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tsetActiveUsers: (state, action) => {\r\n\t\t\tstate.filteredValue = action.payload;\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport const { setActiveUsers } = activeUsers.actions;\r\n\r\nexport default activeUsers.reducer;\r\n\r\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n// export interface IActive {\r\n// \temail: string;\r\n// \tpassword: string;\r\n// \ttoken?: string;\r\n// \tconnect?: boolean;\r\n// }\r\n\r\n// interface IUserState {\r\n// \tusers: IActive[];\r\n// \tloading: 'idle' | 'pending' | 'succeeded' | 'failed';\r\n// \terror: string | null;\r\n// }\r\n\r\n// const initialState: IUserState = {\r\n// \tusers: [],\r\n// \tloading: 'idle',\r\n// \terror: null,\r\n// };\r\n\r\n// export const fetchUsers = createAsyncThunk('login/fetchUsers', async () => {\r\n// \tconst response = await fetch('http://localhost:8000/login');\r\n// \tif (!response.ok) {\r\n// \t\tthrow new Error('Failed to fetch users');\r\n// \t}\r\n// \tconst data = await response.json();\r\n// \treturn data;\r\n// });\r\n\r\n// export const userSlice = createSlice({\r\n// \tname: 'users',\r\n// \tinitialState,\r\n// \treducers: {\r\n// \t\tsetActiveUsers: (state, action) => {\r\n// \t\t\tstate.value = action.payload;\r\n// \t\t\t// state.filteredValue = action.payload;\r\n// \t\t},\r\n// \t},\r\n// \textraReducers: (builder) => {\r\n// \t\tbuilder\r\n// \t\t\t.addCase(fetchUsers.pending, (state) => {\r\n// \t\t\t\tstate.loading = 'pending';\r\n// \t\t\t\tstate.error = null;\r\n// \t\t\t})\r\n// \t\t\t.addCase(fetchUsers.fulfilled, (state, action) => {\r\n// \t\t\t\tstate.loading = 'succeeded';\r\n// \t\t\t\tstate.error = null;\r\n// \t\t\t\tstate.users = action.payload;\r\n// \t\t\t})\r\n// \t\t\t.addCase(fetchUsers.rejected, (state, action) => {\r\n// \t\t\t\tstate.loading = 'failed';\r\n// \t\t\t\tstate.error = action.error.message ?? 'Failed to fetch users';\r\n// \t\t\t});\r\n// \t},\r\n// });\r\n\r\n// export default userSlice.reducer;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,MAAMC,IAAI,GAAG,YAAY;EACxB,IAAI;IACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MAC3DC,MAAM,EAAE;IACT,CAAC,CAAC;IACF,MAAMH,IAAI,GAAG,MAAMC,QAAQ,CAACG,IAAI,EAAE;IAClCC,OAAO,CAACC,GAAG,CAACN,IAAI,CAAC;IACjB,OAAOA,IAAI;EACZ,CAAC,CAAC,OAAOO,GAAG,EAAE;IACbF,OAAO,CAACC,GAAG,EAAE;EACd;AACD,CAAC;AACD,MAAME,MAAiB,GAAG,MAAMR,IAAI,EAAE;AActC,MAAMS,YAA+B,GAAG;EACvCC,KAAK,EAAEF,MAAM;EACbG,aAAa,EAAEH;AAChB,CAAC;AAED,OAAO,MAAMI,WAAW,GAAGb,WAAW,CAAC;EACtCc,IAAI,EAAE,cAAc;EACpBJ,YAAY;EACZK,QAAQ,EAAE;IACTC,cAAc,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAClCD,KAAK,CAACL,aAAa,GAAGM,MAAM,CAACC,OAAO;IACrC;EACD;AACD,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH;AAAe,CAAC,GAAGH,WAAW,CAACO,OAAO;AAErD,eAAeP,WAAW,CAACQ,OAAO;;AAElC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}