{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\n// import { IChef } from '../../components/ChefPage/ChefPage';\n// import data from '../../data.json';\n\n// const data3 = fetch('http://localhost:8000/chef/', {\n// \tmethod: 'GET',\n// })\n// \t.then((response) => response.json())\n// \t.then((data: IChef[]) => {\n// \t\tconsole.log(data); // This will log the result of the fetch request\n// \t\treturn data;\n// \t})\n// \t.catch((err) => {\n// \t\tconsole.log(err.message);\n// \t});\n\n// export const chefSlice = createSlice({\n// \tname: 'chef',\n// \tinitialState: {\n// \t\tvalue: [] as IChef[],\n// \t\tfilteredValue: [] as IChef[],\n// \t},\n// \treducers: {\n// \t\tsetAllchefs: (state) => {\n// \t\t\tstate.filteredValue = state.value;\n// \t\t},\n// \t\tsetNewChef: (state) => {\n// \t\t\tstate.filteredValue = state.value.filter((chef) => chef.newChef === true);\n// \t\t},\n// \t\tsetMostView: (state) => {\n// \t\t\tstate.filteredValue = [...state.value].sort(\n// \t\t\t\t(a: any, b: any) => b?.views - a?.views\n// \t\t\t);\n// \t\t},\n// \t},\n// });\n\n// // Action creators are generated for each case reducer function\n// export const { setAllchefs, setNewChef, setMostView } = chefSlice.actions;\n\n// export default chefSlice.reducer;","map":{"version":3,"names":[],"sources":["C:/Users/hagar/bootcamp/finalepicure/frontend/src/store/slices/chefSlice.tsx"],"sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\r\n// import { IChef } from '../../components/ChefPage/ChefPage';\r\n// import data from '../../data.json';\r\n\r\n// const data3 = fetch('http://localhost:8000/chef/', {\r\n// \tmethod: 'GET',\r\n// })\r\n// \t.then((response) => response.json())\r\n// \t.then((data: IChef[]) => {\r\n// \t\tconsole.log(data); // This will log the result of the fetch request\r\n// \t\treturn data;\r\n// \t})\r\n// \t.catch((err) => {\r\n// \t\tconsole.log(err.message);\r\n// \t});\r\n\r\n// export const chefSlice = createSlice({\r\n// \tname: 'chef',\r\n// \tinitialState: {\r\n// \t\tvalue: [] as IChef[],\r\n// \t\tfilteredValue: [] as IChef[],\r\n// \t},\r\n// \treducers: {\r\n// \t\tsetAllchefs: (state) => {\r\n// \t\t\tstate.filteredValue = state.value;\r\n// \t\t},\r\n// \t\tsetNewChef: (state) => {\r\n// \t\t\tstate.filteredValue = state.value.filter((chef) => chef.newChef === true);\r\n// \t\t},\r\n// \t\tsetMostView: (state) => {\r\n// \t\t\tstate.filteredValue = [...state.value].sort(\r\n// \t\t\t\t(a: any, b: any) => b?.views - a?.views\r\n// \t\t\t);\r\n// \t\t},\r\n// \t},\r\n// });\r\n\r\n// // Action creators are generated for each case reducer function\r\n// export const { setAllchefs, setNewChef, setMostView } = chefSlice.actions;\r\n\r\n// export default chefSlice.reducer;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}