{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { useState } from 'react';\nconst [newDishes, setDishes] = useState([]);\nconst [id, setId] = useState();\nconst [name, setName] = useState('');\nconst [price, setPrice] = useState();\nconst [quantity, setQuantity] = useState();\nconst [img, setImg] = useState('');\nconst [comment, setComment] = useState(['']);\nconst data = async () => {\n  try {\n    const response = await fetch('http://localhost:8000/dishes/', {\n      method: 'GET'\n    });\n    const data = await response.json();\n    console.log(data);\n    return data;\n  } catch (err) {\n    console.log();\n  }\n};\n\n// const orderDish = async (\n// \tid: number,\n// \tname: string,\n// \tprice: number,\n// \timg: string,\n// \tcomment: string,\n// \tquantity: number\n// ) => {\n// \tawait fetch('http://localhost:8000/dishes/orderdish/', {\n// \t\tmethod: 'POST',\n// \t\tbody: JSON.stringify({\n// \t\t\tid: id,\n// \t\t\tname: name,\n// \t\t\tprice: price,\n// \t\t\timg: img,\n// \t\t\tdishtitle: 'dish-order-card-element',\n// \t\t\tcomment: comment,\n// \t\t\tquantity: quantity,\n// \t\t}),\n// \t\theaders: {\n// \t\t\t'Content-type': 'application/json; charset=UTF-8',\n// \t\t},\n// \t})\n// \t\t.then((response) => response.json())\n// \t\t.then((data) => {\n// \t\t\tsetDishes((dish: any) => [data, ...dish]),\n// \t\t\t\tsetId(0),\n// \t\t\t\tsetName(''),\n// \t\t\t\tsetPrice(0),\n// \t\t\t\tsetQuantity(0),\n// \t\t\t\tsetImg(''),\n// \t\t\t\tsetComment(['']);\n// \t\t})\n// \t\t.catch((err) => {\n// \t\t\tconsole.log(err.message);\n// \t\t});\n// };\n\nconst dishes = await data();\nexport const dishesSlice = createSlice({\n  name: 'dishes',\n  initialState: {\n    value: dishes,\n    filteredValue: dishes\n  },\n  reducers: {\n    createOrder: state => {\n      state.filteredValue = state.value;\n    }\n  }\n});\nexport default dishesSlice.reducer;","map":{"version":3,"names":["createSlice","useState","newDishes","setDishes","id","setId","name","setName","price","setPrice","quantity","setQuantity","img","setImg","comment","setComment","data","response","fetch","method","json","console","log","err","dishes","dishesSlice","initialState","value","filteredValue","reducers","createOrder","state","reducer"],"sources":["C:/Users/hagar/bootcamp/finalepicure/frontend/src/store/slices/dishesSlice.tsx"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { useState } from 'react';\r\nimport { IDishes } from '../../components/SignatureDish/DishCard';\r\nconst [newDishes, setDishes] = useState<any>([]);\r\nconst [id, setId] = useState<number>();\r\nconst [name, setName] = useState<string>('');\r\nconst [price, setPrice] = useState<number>();\r\nconst [quantity, setQuantity] = useState<number>();\r\nconst [img, setImg] = useState<string>('');\r\nconst [comment, setComment] = useState<string[]>(['']);\r\n\r\nconst data = async () => {\r\n\ttry {\r\n\t\tconst response = await fetch('http://localhost:8000/dishes/', {\r\n\t\t\tmethod: 'GET',\r\n\t\t});\r\n\t\tconst data = await response.json();\r\n\t\tconsole.log(data);\r\n\t\treturn data;\r\n\t} catch (err) {\r\n\t\tconsole.log();\r\n\t}\r\n};\r\n\r\n// const orderDish = async (\r\n// \tid: number,\r\n// \tname: string,\r\n// \tprice: number,\r\n// \timg: string,\r\n// \tcomment: string,\r\n// \tquantity: number\r\n// ) => {\r\n// \tawait fetch('http://localhost:8000/dishes/orderdish/', {\r\n// \t\tmethod: 'POST',\r\n// \t\tbody: JSON.stringify({\r\n// \t\t\tid: id,\r\n// \t\t\tname: name,\r\n// \t\t\tprice: price,\r\n// \t\t\timg: img,\r\n// \t\t\tdishtitle: 'dish-order-card-element',\r\n// \t\t\tcomment: comment,\r\n// \t\t\tquantity: quantity,\r\n// \t\t}),\r\n// \t\theaders: {\r\n// \t\t\t'Content-type': 'application/json; charset=UTF-8',\r\n// \t\t},\r\n// \t})\r\n// \t\t.then((response) => response.json())\r\n// \t\t.then((data) => {\r\n// \t\t\tsetDishes((dish: any) => [data, ...dish]),\r\n// \t\t\t\tsetId(0),\r\n// \t\t\t\tsetName(''),\r\n// \t\t\t\tsetPrice(0),\r\n// \t\t\t\tsetQuantity(0),\r\n// \t\t\t\tsetImg(''),\r\n// \t\t\t\tsetComment(['']);\r\n// \t\t})\r\n// \t\t.catch((err) => {\r\n// \t\t\tconsole.log(err.message);\r\n// \t\t});\r\n// };\r\n\r\nconst dishes: IDishes[] = await data();\r\n\r\nexport const dishesSlice = createSlice({\r\n\tname: 'dishes',\r\n\tinitialState: {\r\n\t\tvalue: dishes,\r\n\t\tfilteredValue: dishes,\r\n\t},\r\n\treducers: {\r\n\t\tcreateOrder: (state) => {\r\n\t\t\tstate.filteredValue = state.value;\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport default dishesSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,QAAQ,QAAQ,OAAO;AAEhC,MAAM,CAACC,SAAS,EAAEC,SAAS,CAAC,GAAGF,QAAQ,CAAM,EAAE,CAAC;AAChD,MAAM,CAACG,EAAE,EAAEC,KAAK,CAAC,GAAGJ,QAAQ,EAAU;AACtC,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAS,EAAE,CAAC;AAC5C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,EAAU;AAC5C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,EAAU;AAClD,MAAM,CAACW,GAAG,EAAEC,MAAM,CAAC,GAAGZ,QAAQ,CAAS,EAAE,CAAC;AAC1C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAW,CAAC,EAAE,CAAC,CAAC;AAEtD,MAAMe,IAAI,GAAG,YAAY;EACxB,IAAI;IACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;MAC7DC,MAAM,EAAE;IACT,CAAC,CAAC;IACF,MAAMH,IAAI,GAAG,MAAMC,QAAQ,CAACG,IAAI,EAAE;IAClCC,OAAO,CAACC,GAAG,CAACN,IAAI,CAAC;IACjB,OAAOA,IAAI;EACZ,CAAC,CAAC,OAAOO,GAAG,EAAE;IACbF,OAAO,CAACC,GAAG,EAAE;EACd;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,MAAiB,GAAG,MAAMR,IAAI,EAAE;AAEtC,OAAO,MAAMS,WAAW,GAAGzB,WAAW,CAAC;EACtCM,IAAI,EAAE,QAAQ;EACdoB,YAAY,EAAE;IACbC,KAAK,EAAEH,MAAM;IACbI,aAAa,EAAEJ;EAChB,CAAC;EACDK,QAAQ,EAAE;IACTC,WAAW,EAAGC,KAAK,IAAK;MACvBA,KAAK,CAACH,aAAa,GAAGG,KAAK,CAACJ,KAAK;IAClC;EACD;AACD,CAAC,CAAC;AAEF,eAAeF,WAAW,CAACO,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}