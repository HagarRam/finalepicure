{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst datausers = async () => {\n  try {\n    const response = await fetch('http://localhost:8000/users/', {\n      method: 'GET'\n    });\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.log();\n  }\n};\nconst users = await datausers();\n\n// interface UsersState {\n// \tvalue: IUser[];\n// \tfilteredValue: IUser[];\n// }\n\nconst initialState = {\n  value: users,\n  filteredValue: users\n};\nexport const userSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    setAllUsers: state => {\n      state.filteredValue = state.value;\n    }\n    // getName: (state, action) => {\n    // \tconst currentUser = action.payload;\n    // \tconst userLogIn = users.find((user) => {\n    // \t\treturn user.email === currentUser.email;\n    // \t});\n    // \tstate.filteredValue = userLogIn || {};\n    // \tconsole.log(userLogIn);\n    // },\n  }\n});\n\nexport const {\n  setAllUsers\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","datausers","response","fetch","method","data","json","err","console","log","users","initialState","value","filteredValue","userSlice","name","reducers","setAllUsers","state","actions","reducer"],"sources":["C:/Users/hagar/bootcamp/finalepicure/frontend/src/store/slices/usersSlice.tsx"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface IUser {\r\n\tfirstName: string;\r\n\tlastName: string;\r\n\temail: string;\r\n\tpassword: string;\r\n}\r\n\r\nconst datausers = async () => {\r\n\ttry {\r\n\t\tconst response = await fetch('http://localhost:8000/users/', {\r\n\t\t\tmethod: 'GET',\r\n\t\t});\r\n\t\tconst data = await response.json();\r\n\t\treturn data;\r\n\t} catch (err) {\r\n\t\tconsole.log();\r\n\t}\r\n};\r\nconst users: IUser[] = await datausers();\r\n\r\n// interface UsersState {\r\n// \tvalue: IUser[];\r\n// \tfilteredValue: IUser[];\r\n// }\r\n\r\nconst initialState = {\r\n\tvalue: users,\r\n\tfilteredValue: users,\r\n};\r\n\r\nexport const userSlice = createSlice({\r\n\tname: 'users',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tsetAllUsers: (state) => {\r\n\t\t\tstate.filteredValue = state.value;\r\n\t\t},\r\n\t\t// getName: (state, action) => {\r\n\t\t// \tconst currentUser = action.payload;\r\n\t\t// \tconst userLogIn = users.find((user) => {\r\n\t\t// \t\treturn user.email === currentUser.email;\r\n\t\t// \t});\r\n\t\t// \tstate.filteredValue = userLogIn || {};\r\n\t\t// \tconsole.log(userLogIn);\r\n\t\t// },\r\n\t},\r\n});\r\n\r\nexport const { setAllUsers } = userSlice.actions;\r\n\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAS7D,MAAMC,SAAS,GAAG,YAAY;EAC7B,IAAI;IACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;MAC5DC,MAAM,EAAE;IACT,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;IAClC,OAAOD,IAAI;EACZ,CAAC,CAAC,OAAOE,GAAG,EAAE;IACbC,OAAO,CAACC,GAAG,EAAE;EACd;AACD,CAAC;AACD,MAAMC,KAAc,GAAG,MAAMT,SAAS,EAAE;;AAExC;AACA;AACA;AACA;;AAEA,MAAMU,YAAY,GAAG;EACpBC,KAAK,EAAEF,KAAK;EACZG,aAAa,EAAEH;AAChB,CAAC;AAED,OAAO,MAAMI,SAAS,GAAGd,WAAW,CAAC;EACpCe,IAAI,EAAE,OAAO;EACbJ,YAAY;EACZK,QAAQ,EAAE;IACTC,WAAW,EAAGC,KAAK,IAAK;MACvBA,KAAK,CAACL,aAAa,GAAGK,KAAK,CAACN,KAAK;IAClC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD;AACD,CAAC,CAAC;;AAEF,OAAO,MAAM;EAAEK;AAAY,CAAC,GAAGH,SAAS,CAACK,OAAO;AAEhD,eAAeL,SAAS,CAACM,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}