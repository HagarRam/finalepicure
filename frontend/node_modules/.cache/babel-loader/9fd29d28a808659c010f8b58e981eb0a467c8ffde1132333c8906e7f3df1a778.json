{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\n// import { useState } from 'react';\n\n// export interface IActive {\n// \temail: string;\n// \tpassword: string;\n// \ttoken?: string;\n// \tconnect?: boolean;\n// }\n\n// const data = async () => {\n// \ttry {\n// \t\tconst response = await fetch('http://localhost:8000/login', {\n// \t\t\tmethod: 'GET',\n// \t\t});\n// \t\tconst data = await response.json();\n// \t\tconsole.log(data);\n// \t\treturn data;\n// \t} catch (err) {\n// \t\tconsole.log();\n// \t}\n// };\n\n// const active: IActive[] = await data();\n\n// export const activeUsers = createSlice({\n// \tname: 'active-users',\n// \tinitialState: {\n// \t\tvalue: active,\n// \t\tfilteredValue: active,\n// \t},\n// \treducers: {\n// \t\tcreateOrder: (state) => {\n// \t\t\tstate.filteredValue = state.value;\n// \t\t},\n// \t},\n// });\n\n// export default activeUsers.reducer;\n\n// import { createSlice } from '@reduxjs/toolkit';\n// const data = async () => {\n// \ttry {\n// \t\tconst response = await fetch('http://localhost:8000/login', {\n// \t\t\tmethod: 'GET',\n// \t\t});\n// \t\tconst data = await response.json();\n// \t\tconsole.log(data);\n// \t\treturn data;\n// \t} catch (err) {\n// \t\tconsole.log();\n// \t}\n// };\n// const active: IActive[] = await data();\n\n// export interface IActive {\n// \temail: string;\n// \tpassword: string;\n// \ttoken?: string;\n// \tconnect?: boolean;\n// }\n\n// interface IActiveUsersState {\n// \tvalue: IActive[];\n// \tfilteredValue: IActive[];\n// }\n\n// const initialState: IActiveUsersState = {\n// \tvalue: active,\n// \tfilteredValue: active,\n// };\n\n// export const activeUsers = createSlice({\n// \tname: 'active-users',\n// \tinitialState,\n// \treducers: {\n// \t\tsetActiveUsers: (state, action) => {\n// \t\t\t// state.value = action.payload;\n// \t\t\tstate.filteredValue = action.payload;\n// \t\t},\n// \t},\n// });\n\n// export const { setActiveUsers } = activeUsers.actions;\n\n// export default activeUsers.reducer;\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  users: [],\n  loading: 'idle',\n  error: null\n};\nexport const fetchUsers = createAsyncThunk('login', async () => {\n  const response = await fetch('http://localhost:8000/login');\n  if (!response.ok) {\n    throw new Error('Failed to fetch users');\n  }\n  const data = await response.json();\n  return data;\n});\nexport const userSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchUsers.pending, state => {\n      state.loading = 'pending';\n      state.error = null;\n    }).addCase(fetchUsers.fulfilled, (state, action) => {\n      state.loading = 'succeeded';\n      state.error = null;\n      state.users = action.payload;\n    }).addCase(fetchUsers.rejected, (state, action) => {\n      var _action$error$message;\n      state.loading = 'failed';\n      state.error = (_action$error$message = action.error.message) !== null && _action$error$message !== void 0 ? _action$error$message : 'Failed to fetch users';\n    });\n  }\n});\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","users","loading","error","fetchUsers","response","fetch","ok","Error","data","json","userSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["C:/Users/hagar/bootcamp/finalepicure/frontend/src/store/slices/activeUsers.tsx"],"sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\r\n// import { useState } from 'react';\r\n\r\n// export interface IActive {\r\n// \temail: string;\r\n// \tpassword: string;\r\n// \ttoken?: string;\r\n// \tconnect?: boolean;\r\n// }\r\n\r\n// const data = async () => {\r\n// \ttry {\r\n// \t\tconst response = await fetch('http://localhost:8000/login', {\r\n// \t\t\tmethod: 'GET',\r\n// \t\t});\r\n// \t\tconst data = await response.json();\r\n// \t\tconsole.log(data);\r\n// \t\treturn data;\r\n// \t} catch (err) {\r\n// \t\tconsole.log();\r\n// \t}\r\n// };\r\n\r\n// const active: IActive[] = await data();\r\n\r\n// export const activeUsers = createSlice({\r\n// \tname: 'active-users',\r\n// \tinitialState: {\r\n// \t\tvalue: active,\r\n// \t\tfilteredValue: active,\r\n// \t},\r\n// \treducers: {\r\n// \t\tcreateOrder: (state) => {\r\n// \t\t\tstate.filteredValue = state.value;\r\n// \t\t},\r\n// \t},\r\n// });\r\n\r\n// export default activeUsers.reducer;\r\n\r\n// import { createSlice } from '@reduxjs/toolkit';\r\n// const data = async () => {\r\n// \ttry {\r\n// \t\tconst response = await fetch('http://localhost:8000/login', {\r\n// \t\t\tmethod: 'GET',\r\n// \t\t});\r\n// \t\tconst data = await response.json();\r\n// \t\tconsole.log(data);\r\n// \t\treturn data;\r\n// \t} catch (err) {\r\n// \t\tconsole.log();\r\n// \t}\r\n// };\r\n// const active: IActive[] = await data();\r\n\r\n// export interface IActive {\r\n// \temail: string;\r\n// \tpassword: string;\r\n// \ttoken?: string;\r\n// \tconnect?: boolean;\r\n// }\r\n\r\n// interface IActiveUsersState {\r\n// \tvalue: IActive[];\r\n// \tfilteredValue: IActive[];\r\n// }\r\n\r\n// const initialState: IActiveUsersState = {\r\n// \tvalue: active,\r\n// \tfilteredValue: active,\r\n// };\r\n\r\n// export const activeUsers = createSlice({\r\n// \tname: 'active-users',\r\n// \tinitialState,\r\n// \treducers: {\r\n// \t\tsetActiveUsers: (state, action) => {\r\n// \t\t\t// state.value = action.payload;\r\n// \t\t\tstate.filteredValue = action.payload;\r\n// \t\t},\r\n// \t},\r\n// });\r\n\r\n// export const { setActiveUsers } = activeUsers.actions;\r\n\r\n// export default activeUsers.reducer;\r\n\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nexport interface IUser {\r\n\tid: number;\r\n\tname: string;\r\n\temail: string;\r\n}\r\n\r\ninterface IUserState {\r\n\tusers: IUser[];\r\n\tloading: 'idle' | 'pending' | 'succeeded' | 'failed';\r\n\terror: string | null;\r\n}\r\n\r\nconst initialState: IUserState = {\r\n\tusers: [],\r\n\tloading: 'idle',\r\n\terror: null,\r\n};\r\n\r\nexport const fetchUsers = createAsyncThunk('login', async () => {\r\n\tconst response = await fetch('http://localhost:8000/login');\r\n\tif (!response.ok) {\r\n\t\tthrow new Error('Failed to fetch users');\r\n\t}\r\n\tconst data = await response.json();\r\n\treturn data;\r\n});\r\n\r\nexport const userSlice = createSlice({\r\n\tname: 'users',\r\n\tinitialState,\r\n\treducers: {},\r\n\textraReducers: (builder) => {\r\n\t\tbuilder\r\n\t\t\t.addCase(fetchUsers.pending, (state) => {\r\n\t\t\t\tstate.loading = 'pending';\r\n\t\t\t\tstate.error = null;\r\n\t\t\t})\r\n\t\t\t.addCase(fetchUsers.fulfilled, (state, action) => {\r\n\t\t\t\tstate.loading = 'succeeded';\r\n\t\t\t\tstate.error = null;\r\n\t\t\t\tstate.users = action.payload;\r\n\t\t\t})\r\n\t\t\t.addCase(fetchUsers.rejected, (state, action) => {\r\n\t\t\t\tstate.loading = 'failed';\r\n\t\t\t\tstate.error = action.error.message ?? 'Failed to fetch users';\r\n\t\t\t});\r\n\t},\r\n});\r\n\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAchE,MAAMC,YAAwB,GAAG;EAChCC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE,MAAM;EACfC,KAAK,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGL,gBAAgB,CAAC,OAAO,EAAE,YAAY;EAC/D,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;EAC3D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACjB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACzC;EACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;EAClC,OAAOD,IAAI;AACZ,CAAC,CAAC;AAEF,OAAO,MAAME,SAAS,GAAGb,WAAW,CAAC;EACpCc,IAAI,EAAE,OAAO;EACbZ,YAAY;EACZa,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC3BA,OAAO,CACLC,OAAO,CAACZ,UAAU,CAACa,OAAO,EAAGC,KAAK,IAAK;MACvCA,KAAK,CAAChB,OAAO,GAAG,SAAS;MACzBgB,KAAK,CAACf,KAAK,GAAG,IAAI;IACnB,CAAC,CAAC,CACDa,OAAO,CAACZ,UAAU,CAACe,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACjDF,KAAK,CAAChB,OAAO,GAAG,WAAW;MAC3BgB,KAAK,CAACf,KAAK,GAAG,IAAI;MAClBe,KAAK,CAACjB,KAAK,GAAGmB,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDL,OAAO,CAACZ,UAAU,CAACkB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAAA;MAChDF,KAAK,CAAChB,OAAO,GAAG,QAAQ;MACxBgB,KAAK,CAACf,KAAK,4BAAGiB,MAAM,CAACjB,KAAK,CAACoB,OAAO,yEAAI,uBAAuB;IAC9D,CAAC,CAAC;EACJ;AACD,CAAC,CAAC;AAEF,eAAeZ,SAAS,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}