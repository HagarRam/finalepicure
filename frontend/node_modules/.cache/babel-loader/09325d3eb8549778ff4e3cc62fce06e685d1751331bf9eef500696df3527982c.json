{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\n// import {\n// \tIRestaurants,\n// \tIrestaurantsState,\n// } from '../../components/RestaurantPage/RestaurantPage';\n// const data1 = async () => {\n// \ttry {\n// \t\tconst response = await fetch('http://localhost:8000/restaurant/', {\n// \t\t\tmethod: 'GET',\n// \t\t});\n// \t\tconst data = await response.json();\n// \t\tconsole.log(data);\n// \t\treturn data;\n// \t} catch (err) {\n// \t\tconsole.log();\n// \t}\n// };\n// data1();\n// export const restaurantsSlice = createSlice({\n// \tname: 'restaurants',\n// \tinitialState: {\n// \t\tvalue: data1(),\n// \t\tfilteredValue: data1(),\n// \t},\n// \treducers: {\n// \t\tsetAllRestuarants: (state) => {\n// \t\t\tstate.filteredValue = state.value;\n// \t\t},\n// \t\tsetPopularRestuarants: async (state) => {\n// \t\t\tstate.filteredValue = [...await state.value].sort(\n// \t\t\t\t(a: any, b: any) => b.views - a.views\n// \t\t\t);\n// \t\t},\n// \t\tsetNewRestuarants: (state) => {\n// \t\t\tstate.filteredValue = state.value.filter(\n// \t\t\t\t(restaurant: any) => restaurant.newRest === true\n// \t\t\t);\n// \t\t},\n// \t\tsetOpenNow: (state, action) => {\n// \t\t\tstate.filteredValue = action.payload;\n// \t\t},\n// \t\tsetMap: (state) => {\n// \t\t\tstate.filteredValue = state.value;\n// \t\t},\n// \t},\n// });\n// export const newdata = () => async (dispatch: any) => {\n// \ttry {\n// \t\tconst data = await data1();\n// \t\tconsole.log('data1', data);\n// \t\tdispatch(setAllRestuarants(data));\n// \t} catch (error) {\n// \t\tconsole.log();\n// \t}\n// };\n// newdata();\n// export const {\n// \tsetAllRestuarants,\n// \tsetOpenNow,\n// \tsetMap,\n// \tsetPopularRestuarants,\n// \tsetNewRestuarants,\n// } = restaurantsSlice.actions;\n\n// export default restaurantsSlice.reducer;\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  value: [],\n  filteredValue: []\n};\nexport const restaurantsSlice = createSlice({\n  name: 'restaurants',\n  initialState,\n  reducers: {\n    setAllRestuarants: state => {\n      state.filteredValue = state.value;\n    },\n    setPopularRestuarants: async state => {\n      state.filteredValue = [...(await state.value)].sort((a, b) => b.views - a.views);\n    },\n    setNewRestuarants: state => {\n      state.filteredValue = state.value.filter(restaurant => restaurant.newRest === true);\n    },\n    setOpenNow: (state, action) => {\n      state.filteredValue = action.payload;\n    },\n    setMap: state => {\n      state.filteredValue = state.value;\n    }\n  }\n});\nexport const fetchRestaurants = () => async dispatch => {\n  try {\n    const response = await fetch('http://localhost:8000/restaurant/', {\n      method: 'GET'\n    });\n    const data = await response.json();\n    dispatch(setAllRestuarants(data));\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const {\n  setAllRestuarants,\n  setOpenNow,\n  setMap,\n  setPopularRestuarants,\n  setNewRestuarants\n} = restaurantsSlice.actions;\nexport default restaurantsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","value","filteredValue","restaurantsSlice","name","reducers","setAllRestuarants","state","setPopularRestuarants","sort","a","b","views","setNewRestuarants","filter","restaurant","newRest","setOpenNow","action","payload","setMap","fetchRestaurants","dispatch","response","fetch","method","data","json","err","console","log","actions","reducer"],"sources":["C:/Users/hagar/bootcamp/finalepicure/frontend/src/store/slices/restaurantsSlice.tsx"],"sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\r\n// import {\r\n// \tIRestaurants,\r\n// \tIrestaurantsState,\r\n// } from '../../components/RestaurantPage/RestaurantPage';\r\n// const data1 = async () => {\r\n// \ttry {\r\n// \t\tconst response = await fetch('http://localhost:8000/restaurant/', {\r\n// \t\t\tmethod: 'GET',\r\n// \t\t});\r\n// \t\tconst data = await response.json();\r\n// \t\tconsole.log(data);\r\n// \t\treturn data;\r\n// \t} catch (err) {\r\n// \t\tconsole.log();\r\n// \t}\r\n// };\r\n// data1();\r\n// export const restaurantsSlice = createSlice({\r\n// \tname: 'restaurants',\r\n// \tinitialState: {\r\n// \t\tvalue: data1(),\r\n// \t\tfilteredValue: data1(),\r\n// \t},\r\n// \treducers: {\r\n// \t\tsetAllRestuarants: (state) => {\r\n// \t\t\tstate.filteredValue = state.value;\r\n// \t\t},\r\n// \t\tsetPopularRestuarants: async (state) => {\r\n// \t\t\tstate.filteredValue = [...await state.value].sort(\r\n// \t\t\t\t(a: any, b: any) => b.views - a.views\r\n// \t\t\t);\r\n// \t\t},\r\n// \t\tsetNewRestuarants: (state) => {\r\n// \t\t\tstate.filteredValue = state.value.filter(\r\n// \t\t\t\t(restaurant: any) => restaurant.newRest === true\r\n// \t\t\t);\r\n// \t\t},\r\n// \t\tsetOpenNow: (state, action) => {\r\n// \t\t\tstate.filteredValue = action.payload;\r\n// \t\t},\r\n// \t\tsetMap: (state) => {\r\n// \t\t\tstate.filteredValue = state.value;\r\n// \t\t},\r\n// \t},\r\n// });\r\n// export const newdata = () => async (dispatch: any) => {\r\n// \ttry {\r\n// \t\tconst data = await data1();\r\n// \t\tconsole.log('data1', data);\r\n// \t\tdispatch(setAllRestuarants(data));\r\n// \t} catch (error) {\r\n// \t\tconsole.log();\r\n// \t}\r\n// };\r\n// newdata();\r\n// export const {\r\n// \tsetAllRestuarants,\r\n// \tsetOpenNow,\r\n// \tsetMap,\r\n// \tsetPopularRestuarants,\r\n// \tsetNewRestuarants,\r\n// } = restaurantsSlice.actions;\r\n\r\n// export default restaurantsSlice.reducer;\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport { Dispatch } from 'redux';\r\nimport { IRestaurants } from '../../components/RestaurantPage/RestaurantPage';\r\n\r\ninterface IRestaurantSliceState {\r\n\tvalue: IRestaurants[];\r\n\tfilteredValue: IRestaurants[];\r\n}\r\n\r\nconst initialState: IRestaurantSliceState = {\r\n\tvalue: [],\r\n\tfilteredValue: [],\r\n};\r\n\r\nexport const restaurantsSlice = createSlice({\r\n\tname: 'restaurants',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tsetAllRestuarants: (state) => {\r\n\t\t\tstate.filteredValue = state.value;\r\n\t\t},\r\n\t\tsetPopularRestuarants: async (state) => {\r\n\t\t\tstate.filteredValue = [...(await state.value)].sort(\r\n\t\t\t\t(a: any, b: any) => b.views - a.views\r\n\t\t\t);\r\n\t\t},\r\n\t\tsetNewRestuarants: (state) => {\r\n\t\t\tstate.filteredValue = state.value.filter(\r\n\t\t\t\t(restaurant: any) => restaurant.newRest === true\r\n\t\t\t);\r\n\t\t},\r\n\t\tsetOpenNow: (state, action) => {\r\n\t\t\tstate.filteredValue = action.payload;\r\n\t\t},\r\n\t\tsetMap: (state) => {\r\n\t\t\tstate.filteredValue = state.value;\r\n\t\t},\r\n\t},\r\n});\r\nexport const fetchRestaurants = () => async (dispatch: Dispatch) => {\r\n\ttry {\r\n\t\tconst response = await fetch('http://localhost:8000/restaurant/', {\r\n\t\t\tmethod: 'GET',\r\n\t\t});\r\n\t\tconst data = await response.json();\r\n\t\tdispatch(setAllRestuarants(data));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n};\r\n\r\nexport const {\r\n\tsetAllRestuarants,\r\n\tsetOpenNow,\r\n\tsetMap,\r\n\tsetPopularRestuarants,\r\n\tsetNewRestuarants,\r\n} = restaurantsSlice.actions;\r\n\r\nexport default restaurantsSlice.reducer;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,WAAW,QAAQ,kBAAkB;AAS9C,MAAMC,YAAmC,GAAG;EAC3CC,KAAK,EAAE,EAAE;EACTC,aAAa,EAAE;AAChB,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGJ,WAAW,CAAC;EAC3CK,IAAI,EAAE,aAAa;EACnBJ,YAAY;EACZK,QAAQ,EAAE;IACTC,iBAAiB,EAAGC,KAAK,IAAK;MAC7BA,KAAK,CAACL,aAAa,GAAGK,KAAK,CAACN,KAAK;IAClC,CAAC;IACDO,qBAAqB,EAAE,MAAOD,KAAK,IAAK;MACvCA,KAAK,CAACL,aAAa,GAAG,CAAC,IAAI,MAAMK,KAAK,CAACN,KAAK,CAAC,CAAC,CAACQ,IAAI,CAClD,CAACC,CAAM,EAAEC,CAAM,KAAKA,CAAC,CAACC,KAAK,GAAGF,CAAC,CAACE,KAAK,CACrC;IACF,CAAC;IACDC,iBAAiB,EAAGN,KAAK,IAAK;MAC7BA,KAAK,CAACL,aAAa,GAAGK,KAAK,CAACN,KAAK,CAACa,MAAM,CACtCC,UAAe,IAAKA,UAAU,CAACC,OAAO,KAAK,IAAI,CAChD;IACF,CAAC;IACDC,UAAU,EAAE,CAACV,KAAK,EAAEW,MAAM,KAAK;MAC9BX,KAAK,CAACL,aAAa,GAAGgB,MAAM,CAACC,OAAO;IACrC,CAAC;IACDC,MAAM,EAAGb,KAAK,IAAK;MAClBA,KAAK,CAACL,aAAa,GAAGK,KAAK,CAACN,KAAK;IAClC;EACD;AACD,CAAC,CAAC;AACF,OAAO,MAAMoB,gBAAgB,GAAG,MAAM,MAAOC,QAAkB,IAAK;EACnE,IAAI;IACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;MACjEC,MAAM,EAAE;IACT,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;IAClCL,QAAQ,CAAChB,iBAAiB,CAACoB,IAAI,CAAC,CAAC;EAClC,CAAC,CAAC,OAAOE,GAAG,EAAE;IACbC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EACjB;AACD,CAAC;AAED,OAAO,MAAM;EACZtB,iBAAiB;EACjBW,UAAU;EACVG,MAAM;EACNZ,qBAAqB;EACrBK;AACD,CAAC,GAAGV,gBAAgB,CAAC4B,OAAO;AAE5B,eAAe5B,gBAAgB,CAAC6B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}